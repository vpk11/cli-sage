{
  "documents": [
    {
      "title": "Python: Introduction",
      "body": "Python is an interpreted, high-level programming language known for its readability and versatility. It supports multiple paradigms, including procedural, object-oriented, and functional programming.",
      "meta": {
        "tags": ["python", "documentation"]
      },
      "url": "https://example.com/python/introduction"
    },
    {
      "title": "Python: Standard Library",
      "body": "The Python Standard Library offers a wide range of modules and packages that provide tools for tasks such as file handling, networking, data serialization, and more. This documentation covers the built-in features and modules that every Python developer should know.",
      "meta": {
        "tags": ["python", "documentation"]
      },
      "url": "https://example.com/python/standard-library"
    },
    {
      "title": "Python: Best Practices",
      "body": "This document outlines best practices for writing efficient and maintainable Python code. Topics include following PEP8 guidelines, using virtual environments, writing tests, and adopting idiomatic solutions.",
      "meta": {
        "tags": ["python", "documentation"]
      },
      "url": "https://example.com/python/best-practices"
    },
    {
      "title": "Ruby: Introduction",
      "body": "Ruby is a dynamic, open-source programming language with an elegant syntax that is natural to read and easy to write. This documentation introduces Ruby’s philosophy, core features, and its object-oriented approach.",
      "meta": {
        "tags": ["ruby", "documentation"]
      },
      "url": "https://example.com/ruby/introduction"
    },
    {
      "title": "Ruby: Core Concepts",
      "body": "This document covers key concepts of Ruby, including objects, classes, modules, blocks, and mixins. It provides insight into how Ruby’s flexible syntax supports multiple programming paradigms.",
      "meta": {
        "tags": ["ruby", "documentation"]
      },
      "url": "https://example.com/ruby/core-concepts"
    },
    {
      "title": "Ruby: Best Practices",
      "body": "Learn best practices for Ruby development, such as writing idiomatic code, effectively managing gems, applying test-driven development, and adhering to community style guides.",
      "meta": {
        "tags": ["ruby", "documentation"]
      },
      "url": "https://example.com/ruby/best-practices"
    },
    {
      "title": "Elixir: Introduction",
      "body": "Elixir is a dynamic, functional programming language designed for building scalable and maintainable applications. Running on the Erlang VM, it brings concurrency, fault tolerance, and an expressive syntax to modern software development.",
      "meta": {
        "tags": ["elixir", "documentation"]
      },
      "url": "https://example.com/elixir/introduction"
    },
    {
      "title": "Elixir: Concurrency and Fault Tolerance",
      "body": "This documentation explains Elixir’s approach to designing concurrent and resilient systems. It covers the fundamentals of processes, the actor model, supervision trees, and OTP principles.",
      "meta": {
        "tags": ["elixir", "documentation"]
      },
      "url": "https://example.com/elixir/concurrency-fault-tolerance"
    },
    {
      "title": "Elixir: Best Practices",
      "body": "Explore best practices in Elixir development, including the use of the pipeline operator for clarity, pattern matching for control flow, and leveraging OTP components to manage state and concurrency.",
      "meta": {
        "tags": ["elixir", "documentation"]
      },
      "url": "https://example.com/elixir/best-practices"
    }
  ]
}
